{"version":3,"sources":["components/Projects.js","components/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["Projects","_ref","item","react_default","a","createElement","className","src","imageUrl","alt","imageAlt","title","href","link","description","Navigation","Navbar","id","fluid","Header","Brand","Nav","NavItem","eventKey","projects","App","me","anonymous","state","image","welcome","_this2","this","Grid","style","background","Row","Col","components_Navigation","Jumbotron","textAlign","onMouseOver","setState","onMouseLeave","width","height","borderRadius","map","index","key","padding","md","mdPush","components_Projects","margin","target","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cceb22e4.chunk.js","sourcesContent":["// a project should have an image, a description, and a link\n//maybe a grid or an ordered list?\n\nimport React from \"react\";\n\nconst Projects = ({ item }) => {\n  return (\n    <div className=\"card project-title\">\n      <img src={item.imageUrl} alt={item.imageAlt} />\n      <div className=\"container\">\n        <h4>\n          <b>{item.title}</b>\n        </h4>\n        <a href={item.link}>\n          <p>{item.description}</p>\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default Projects;\n","import React from \"react\";\nimport { Navbar, Nav, NavItem } from \"react-bootstrap\";\n\nconst Navigation = () => {\n  return (\n    <Navbar id=\"navbar\" fluid>\n      <Navbar.Header>\n        <Navbar.Brand>\n          <a href=\"_blank\">React-Bootstrap</a>\n        </Navbar.Brand>\n      </Navbar.Header>\n      <Nav>\n        <NavItem eventKey={1} href=\"#welcome-section\">\n          Welcome\n        </NavItem>\n        <NavItem eventKey={2} href=\"#\">\n          Link\n        </NavItem>\n      </Nav>\n    </Navbar>\n  );\n};\n\nexport default Navigation;\n","import React, { Component } from \"react\";\nimport {\n  Grid,\n  Row,\n  Col,\n  Jumbotron,\n  Well,\n  Button,\n  Glyphicon\n} from \"react-bootstrap\";\nimport Projects from \"./components/Projects\";\nimport Navigation from \"./components/Navigation\";\n//projects will recieve as props an array of projects...were are the coming from?\n\nconst projects = [\n  {\n    imageAlt: \"Avatar\",\n    imageUrl: \"https://i.imgur.com/oW1dGDI.jpg\",\n    description: \"I'm a mockup project\",\n    title: \"Mockup\",\n    link: \"http://google.com\"\n  },\n  {\n    imageAlt: \"Avatar\",\n    imageUrl: \"https://i.imgur.com/oW1dGDI.jpg\",\n    description: \"I'm a mockup project\",\n    title: \"Mockup\",\n    link: \"http://google.com\"\n  },\n  {\n    imageAlt: \"Avatar\",\n    imageUrl: \"https://i.imgur.com/oW1dGDI.jpg\",\n    description: \"I'm a mockup project\",\n    title: \"Mockup\",\n    link: \"http://google.com\"\n  },\n  {\n    imageAlt: \"Avatar\",\n    imageUrl: \"https://i.imgur.com/oW1dGDI.jpg\",\n    description: \"I'm a mockup project\",\n    title: \"Mockup\",\n    link: \"http://google.com\"\n  },\n  {\n    imageAlt: \"Avatar\",\n    imageUrl: \"https://i.imgur.com/oW1dGDI.jpg\",\n    description: \"I'm a mockup project\",\n    title: \"Mockup\",\n    link: \"http://google.com\"\n  }\n];\n\nclass App extends Component {\n  me =\n    \"https://media.licdn.com/dms/image/C5603AQF3R-8fYvpVmg/profile-displayphoto-shrink_200_200/0?e=1547683200&v=beta&t=lKBAK0n0-ah0-ju5nyv3rRpQXq1KYzidDQalhMMq-bc\";\n  anonymous =\n    \"http://profilepicturesdp.com/wp-content/uploads/2018/07/profile-picture-fb-3.jpg\";\n  state = {\n    image: false,\n    welcome: false\n  };\n\n  render() {\n    return (\n      <Grid style={{ background: \"#FFF\" }}>\n        <Row className=\"show-grid\">\n          <Col>\n            <Navigation />\n            <Jumbotron\n              style={{\n                textAlign: \"center\"\n              }}\n            >\n              <img\n                src={this.state.image ? this.me : this.anonymous}\n                alt=\"me\"\n                onMouseOver={() => this.setState({ image: true })}\n                onMouseLeave={() => this.setState({ image: false })}\n                style={{\n                  width: \"100px\",\n                  height: \"auto\",\n                  borderRadius: \"50%\"\n                }}\n              />\n              <h1>My porfolio</h1>\n              <p>I'm a paragraph</p>\n            </Jumbotron>\n          </Col>\n        </Row>\n        <Row className=\"show-grid2\">\n          <Col>\n            <section id=\"welcome-section\">\n              <h1\n                onMouseOver={() => this.setState({ welcome: true })}\n                onMouseLeave={() => this.setState({ welcome: false })}\n              >\n                {this.state.welcome ? (\n                  <img src=\"http://iddp.com/wp-content/uploads/2016/08/hire_me.jpg\" />\n                ) : (\n                  \"Welcome to My portfolio, please hover over me, if you dare\"\n                )}\n              </h1>\n            </section>\n          </Col>\n        </Row>\n        <Row className=\"show-grid3\">\n          <section id=\"projects\">\n            <h1 style={{ textAlign: \"center\" }}>Projects</h1>\n            {projects.map((item, index) => (\n              <Col\n                key={index}\n                style={{ padding: \"10px 10px 10px 10px\" }}\n                md={5}\n                mdPush={2}\n              >\n                <Projects item={item} />\n              </Col>\n            ))}\n          </section>\n        </Row>\n        <Row>\n          <a\n            className=\"contact-details\"\n            style={{ margin: \"10px 50% 10px 50%\" }}\n            href=\"https://github.com/keiichiwatanuki\"\n            id=\"profile-link\"\n            target=\"_blank\"\n          >\n            Github\n          </a>\n        </Row>\n      </Grid>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}